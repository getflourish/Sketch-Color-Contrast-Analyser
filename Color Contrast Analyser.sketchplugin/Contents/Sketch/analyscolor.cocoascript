// Calculates the color contrast of two layers 
// Read more about the Web Content Accessibility Guidelines 2.0 
// http://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-contrast

// Based on these algorithms: 
// • http://gmazzocato.altervista.org/colorwheel/algo.php
// • https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending This was originally integrated by Liu on a separate fork (https://github.com/auxdesigner/Sketch-Color-Contrast-Analyser) using this formula from Lea Verou (member of W3C working group): When a semi-transparent color that described by rgba(R₁, G₁, B₁, A₁) is overlaid on a solid color rgb(R₂, G₂, B₂), the resulting solid color of the alpha blending operation will be rgb(R₁A₁ + R₂(1-A₁), G₁A₁ + G₂(1-A₁), B₁A₁ + B₂(1-A₁)).
// —————————————————————————————————————————

	// This plugin expects a selection of two layers or a single layer that will be checked against the artboard’s background color.


// Reference to the text layer if there is any
var textLayer = null; 
var doc = null;

var onRun = function(context) {  
	doc = context.document;
  	var selection = context.selection; 
  	var page = doc.currentPage(); 

	// Setup
	var app = NSApplication.sharedApplication();

	switch (selection.count()) {
		case 0:
			app.displayDialog_withTitle("Please select one or two layers.", "Color Contrast Analyser");
		break;

		// If only one layer is selected, check against the artboard background color. In this case, layer1 is the foreground layer.
		case 1:
			var layer2 = selection[0]; // Foreground
			var color2 = getColorOf(layer2);
			var o2 = layer2.style().contextSettings().opacity(); // Foreground layer opacity

			// Get Artboard background color

			if (page.currentArtboard() != null) {
	
				color1 = page.currentArtboard().backgroundColor();

				var a1 = color1.alpha(); // Artboard alpha
				var a2 = color2.alpha() * o2; // Foreground alpha
				var cr = getColorContrastOf(color1, color2, a1, a2);
				showResult(cr);
			} else {
				app.displayDialog_withTitle("This plugin requires a single layer on an artboard or two selected layers to work.", "Color Contrast Analyser");
			}

		break;

		// In this case, layer1 is the background layer
		case 2:
			var layer1 = selection[0]; // Background
			var layer2 = selection[1]; // Foreground

			var color1 = getColorOf(layer1);
			var color2 = getColorOf(layer2);
			
			var o1 = layer1.style().contextSettings().opacity();
			var o2 = layer2.style().contextSettings().opacity();
			
			// Get the alpha value by multiplying the text alpha by the layer alpha
			var a1 = color1.alpha() * o1;
			var a2 = color2.alpha() * o2;

			var cr = getColorContrastOf(color1, color2, a1, a2);

			showResult(cr);
		break;
	}


	function getColorOf(layer) {
		var color = null;
		switch ([layer class]) {
			case MSTextLayer:
		    	color = layer.textColor();
				textLayer = layer;

				// Check if text layer has a fill color

				var fill = layer.style().fills().firstObject();
				if (fill != undefined && fill.isEnabled()) color = fill.color();
			break;
		  	default:
		    	var fill = layer.style().fills().firstObject();
				color = fill.color();
		    break;
		}
		return color;
	}
}

function getColorContrastOf(color1, color2, a1, a2) {

	// Get the actual RGB values without the alpha components
	V1R = color1.red() * 255;  
	V1G = color1.green() * 255;
	V1B = color1.blue() * 255;

	V2R = color2.red() * 255;  
	V2G = color2.green() * 255;
	V2B = color2.blue() * 255;
	
	// Use this formula to calculate the actual RGB values with the alpha components:
	// rgb(R₁A₁ + R₂(1-A₁), G₁A₁ + G₂(1-A₁), B₁A₁ + B₂(1-A₁))
	V3R = (V2R * a2 + V1R * (1 - a2)).toFixed(0);
	V3G = (V2G * a2 + V1G * (1 - a2)).toFixed(0);
	V3B = (V2B * a2 + V1B * (1 - a2)).toFixed(0);

	V4R = (V1R * a1 + V2R * (1 - a1)).toFixed(0);
	V4G = (V1G * a1 + V2G * (1 - a1)).toFixed(0);
	V4B = (V1B * a1 + V2B * (1 - a1)).toFixed(0);

	// Color 1 without alph

	L1R = color1.red();
	if (L1R <= 0.03928) {
		L1R = color1.red() / 12.92;
	} else {
		L1R = Math.pow(((L1R + 0.055)/1.055), 2.4)
	}

	L1G = color1.green();
	if (L1G <= 0.03928) {
		L1G = color1.green() / 12.92;
	} else {
		L1G = Math.pow(((L1G + 0.055)/1.055), 2.4)
	}

	L1B = color1.blue();
	if (L1B <= 0.03928) {
		L1B = color1.blue() / 12.92;
	} else {
		L1B = Math.pow(((L1B + 0.055)/1.055), 2.4)
	}

	// Color 2

	L2R = color2.red();
	if (L2R <= 0.03928) {
		L2R = color2.red() / 12.92;
	} else {
		L2R = Math.pow(((L2R + 0.055)/1.055), 2.4)
	}

	L2G = color2.green();
	if (L2G <= 0.03928) {
		L2G = color2.green() / 12.92;
	} else {
		L2G = Math.pow(((L2G + 0.055)/1.055), 2.4)
	}

	L2B = color2.blue();
	if (L2B <= 0.03928) {
		L2B = color2.blue() / 12.92;
	} else {
		L2B = Math.pow(((L2B + 0.055)/1.055), 2.4)
	}
	
	// Color 3
	
	L3R = V3R / 255;
	if (L3R <= 0.03928) {
		L3R = V3R / 255 / 12.92;
	} else {
		L3R = Math.pow(((V3R / 255 + 0.055)/1.055), 2.4)
	}

	L3G = V3G / 255;
	if (L3G <= 0.03928) {
		L3G = V3G / 255 / 12.92;
	} else {
		L3G = Math.pow(((V3G / 255 + 0.055)/1.055), 2.4)
	}

	L3B = V3B / 255;
	if (L3B <= 0.03928) {
		L3B = V3B / 255 / 12.92;
	} else {
		L3B = Math.pow(((V3B / 255 + 0.055)/1.055), 2.4)
	}

	// Color 4

	L4R = V4R / 255;
	if (L4R <= 0.03928) {
		L4R = V4R / 255 / 12.92;
	} else {
		L4R = Math.pow(((V4R / 255 + 0.055)/1.055), 2.4)
	}

	L4G = V4G / 255;
	if (L4G <= 0.03928) {
		L4G = V4G / 255 / 12.92;
	} else {
		L4G = Math.pow(((V4G / 255 + 0.055)/1.055), 2.4)
	}

	L4B = V4B / 255;
	if (L4B <= 0.03928) {
		L4B = V4B / 255 / 12.92;
	} else {
		L4B = Math.pow(((V4B / 255 + 0.055)/1.055), 2.4)
	}

	var L1 = 0.2126 * L1R + 0.7152 * L1G + 0.0722 * L1B; // Background color without alpha
	var L2 = 0.2126 * L2R + 0.7152 * L2G + 0.0722 * L2B; // Foreground color without alpha
	var L3 = 0.2126 * L3R + 0.7152 * L3G + 0.0722 * L3B; // Foreground color with alpha
	var L4 = 0.2126 * L4R + 0.7152 * L4G + 0.0722 * L4B; // Background color with alpha

	// Make sure L1 is the lighter color

	if (L4 <= L3) {
		var temp = L3;
		L3 = L4;
		L4 = temp;
	}

	// Calculate contrast

	cr = ((L4 + 0.05) / (L3 + 0.05)).toFixed(1);

	return cr;
}

function convertWcagPointsToNsFontPoints(points) {
	// WCAG uses CSS points at 96 ppi, 1pt = ~1.3334px
	// Sketch uses NSFont points at 72 ppi, 1pt = 1px
	return (points * 96) / 72;
}

function showResult (cr) {
	// Check against AA / AAA
	var result = "❌ AA Failed";

	var fontSize = 14;

	if (textLayer != null) {
		var fontSize = textLayer.fontSize();
		var isBold = false;

		if (textLayer.fontPostscriptName().indexOf("Bold") != -1) {
			var isBold = true;
		}
	}

	var largeTextRegular = convertWcagPointsToNsFontPoints(18);
	var largeTextBold = convertWcagPointsToNsFontPoints(14);

	if ((fontSize >= largeTextRegular || (isBold && fontSize >= largeTextBold)) && cr >=3) result = "✅ AA passed (large text)"
	if(cr >= 4.5) result = "✅ AA passed"

	if ((fontSize >= largeTextRegular || (isBold && fontSize >= largeTextBold)) && cr >=4.5) result = "✅ AAA passed (large text)"
	if(cr >= 7.0) result = "✅ AAA passed"

	// Floor decimals after first one while avoiding JS floating point errors.
	var floored = (cr.toString().match(/^-?\d+(?:\.\d{0,1})?/)[0]*1).toFixed(1)

	// Show ratio
	doc.showMessage(result + " - " + floored + ":1");

}
